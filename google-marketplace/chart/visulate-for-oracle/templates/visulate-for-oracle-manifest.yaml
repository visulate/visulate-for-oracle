---
#####################################
# Secrets and ConfigMaps
#####################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-nginx-config
data:
  nginx.conf: |
    worker_processes 1;
    events { worker_connections 1024; }
    http {
      sendfile on;

      upstream visapi {
        server {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc:{{ .Values.apiServer.port }};
      }

      upstream visui {
        server {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc:{{ .Values.ui.port }};
      }

      upstream vissql {
        server {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}-svc:{{ .Values.sql.port }};
      }

      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;

      server {
        listen 80;

        location / {
          proxy_pass       http://visui/;
          proxy_redirect     off;
        }
        location /api/ {
          proxy_pass       http://visapi/api/;
          proxy_redirect     off;
        }
        location /api-docs/ {
          proxy_pass       http://visapi/api-docs/;
          proxy_redirect     off;
        }
        location /find/ {
          proxy_pass       http://visapi/find/;
          proxy_redirect     off;
        }
        location /ddl/ {
          proxy_pass       http://visapi/ddl/;
          proxy_redirect     off;
        }
        location /endpoints/ {
          proxy_pass       http://visapi/endpoints/;
          proxy_redirect     off;
        }
        location /ai {
          proxy_pass       http://visapi/ai/;
          proxy_redirect     off;
        }
        location /ai/ {
          proxy_pass       http://visapi/ai/;
          proxy_redirect     off;
        }
        location /sql/ {
          proxy_pass       http://vissql/sql/;
          proxy_redirect     off;
        }
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-ubbagent-config
data:
  config.yaml: |-
{{ .Files.Get "ubbagent-config.yaml" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-empty-database-array
type: Opaque
stringData:
  database.js: |-
{{ .Files.Get "database.js" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-empty-endpoints
type: Opaque
stringData:
  endpoints.json: |-
{{ .Files.Get "endpoints.json" | indent 4 }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-tls
  labels:
    app.kubernetes.io/name: "{{ .Release.Name }}"
    app.kubernetes.io/component: visulate-for-oracle
data:
  tls.key: |
    {{ .Values.tls.base64EncodedPrivateKey }}
  tls.crt: |
    {{ .Values.tls.base64EncodedCertificate }}
type: kubernetes.io/tls
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-hbs-templates
data:
{{- (.Files.Glob "hbs-templates/*").AsConfig | nindent 4}}
---
#####################################
# API Server
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.apiServer.port }}
      targetPort: {{ .Values.apiServer.port }}
      name: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.apiServer.label }}
  labels: &ServerDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.apiServer.label }}
spec:
  replicas: {{ .Values.apiServer.replicas }}
  selector:
    matchLabels: *ServerDeploymentLabels
  template:
    metadata:
      labels: *ServerDeploymentLabels
    spec:
      containers:
        # API Server
        - name: {{ .Chart.Name }}-{{ .Values.apiServer.label }}
          image: "{{ .Values.apiServer.image.repo }}:{{ .Values.apiServer.image.tag }}"
          volumeMounts:
            - name: config-database-volume
              mountPath: /visulate-server/config/database.js
              subPath: database.js
            - name: logfiles
              mountPath: /visulate-server/logs
            - name: ubbagent-config
              mountPath: /etc/ubbagent/
            - name: ubbagent-state
              mountPath: /var/lib/ubbagent
            - name: hbs-templates-dir
              mountPath: /visulate-server/hbs-templates
          ports:
            - containerPort: {{ .Values.apiServer.port }}
          env:
            - name: CORS_ORIGIN_WHITELIST
              value: "{{ .Values.apiServer.corsOriginWhitelist }}"
          livenessProbe:
            httpGet:
              path: /endpoints/
              port: {{ .Values.apiServer.port }}
            initialDelaySeconds: 180
            periodSeconds: 60
            timeoutSeconds: 20
        # Sidecar containers
        # Echo logs to stdout where Stackdriver can access them
        - name: message-log
          image: "{{ .Values.util.image }}"
          command: ["/bin/sh"]
          args: ["-c", "tail -n+1 -f /visulate-server/logs/*.log"]
          volumeMounts:
            - name: logfiles
              mountPath: /visulate-server/logs
        # Google ubbagent
        - name: ubbagent-db-connections
          image: "{{ .Values.util.image }}"
          command: ["/bin/sh"]
          args: ["-c", "while sleep 3600; do (./ubbagent-database_connections.sh 'http://localhost:{{ .Values.apiServer.port }}/api' 'http://localhost:4567/report' &) ; done"]
        - name: ubbagent
          image: "{{ .Values.ubbagent.image }}"
          env:
          - name: AGENT_CONFIG_FILE
            value: /etc/ubbagent/config.yaml
          - name: AGENT_LOCAL_PORT
            value: "4567"
          - name: AGENT_STATE_DIR
            value: /var/lib/ubbagent
          - name: AGENT_REPORT_DIR
            value: /var/lib/ubbagent/reports
          - name: AGENT_ENCODED_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.reportingSecret }}
                key: reporting-key
          - name: AGENT_CONSUMER_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.reportingSecret }}
                key: consumer-id
          volumeMounts:
            - name: ubbagent-config
              mountPath: /etc/ubbagent
            - name: ubbagent-state
              mountPath: /var/lib/ubbagent
      volumes:
        - name: config-database-volume
          secret:
            secretName: {{ .Release.Name }}-empty-database-array
        - name: hbs-templates-dir
          configMap:
            name: {{ .Release.Name }}-hbs-templates
        - name: logfiles
          emptyDir: {}
        - name: ubbagent-state
          emptyDir: {}
        - name: ubbagent-config
          configMap:
            name: {{ .Release.Name }}-ubbagent-config
---
#####################################
# UI
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.ui.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.ui.port }}
      targetPort: {{ .Values.ui.port }}
      name: {{ .Chart.Name }}-{{ .Values.ui.label }}
    - protocol: TCP
      port: {{ .Values.ui.tlsPort }}
      targetPort: {{ .Values.ui.port }}
      name: {{ .Chart.Name }}-{{ .Values.ui.label }}-tls
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.ui.label }}
  labels: &UiDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.ui.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.ui.label }}
spec:
  replicas: {{ .Values.ui.replicas }}
  selector:
    matchLabels: *UiDeploymentLabels
  template:
    metadata:
      labels: *UiDeploymentLabels
    spec:
      containers:
        - name: {{ .Chart.Name }}-{{ .Values.ui.label }}
          image: "{{ .Values.ui.image.repo }}:{{ .Values.ui.image.tag }}"
          volumeMounts:
            - name: logfiles
              mountPath: /var/log/nginx
          ports:
            - containerPort: {{ .Values.ui.port }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.ui.port }}
            initialDelaySeconds: 90
            periodSeconds: 20
            timeoutSeconds: 3
        # Sidecar containers
        # Echo logs to stdout where Stackdriver can access them
        - name: message-log
          image: "{{ .Values.util.image }}"
          args: [/bin/sh, -c, 'tail -n+1 -f /var/log/nginx/*.log']
          volumeMounts:
            - name: logfiles
              mountPath: /var/log/nginx
      volumes:
        - name: logfiles
          emptyDir: {}
---
#####################################
# Query Engine
#####################################
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
spec:
  type: NodePort
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.sql.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.sql.port }}
      targetPort: {{ .Values.sql.port }}
      name: {{ .Chart.Name }}-{{ .Values.sql.label }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.sql.label }}
  labels: &SqlDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.sql.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.sql.label }}
spec:
  replicas: {{ .Values.sql.replicas }}
  selector:
    matchLabels: *SqlDeploymentLabels
  template:
    metadata:
      labels: *SqlDeploymentLabels
    spec:
      containers:
        - name: {{ .Chart.Name }}-{{ .Values.sql.label }}
          image: "{{ .Values.sql.image.repo }}:{{ .Values.sql.image.tag }}"
          volumeMounts:
            - name: config-endpoints-volume
              mountPath: /query-engine/sql2csv/config/endpoints.json
              subPath: endpoints.json
          ports:
            - containerPort: {{ .Values.sql.port }}
          env:
            - name: CORS_ORIGIN_WHITELIST
              value: "{{ .Values.apiServer.corsOriginWhitelist }}"
          livenessProbe:
            httpGet:
              path: /sql/healthz
              port: {{ .Values.sql.port }}
            initialDelaySeconds: 90
            periodSeconds: 60
            timeoutSeconds: 20
      volumes:
        - name: config-endpoints-volume
          secret:
            secretName: {{ .Release.Name }}-empty-endpoints
---
######################################
# Proxy Server
######################################
apiVersion: v1
kind: Service
metadata:
  annotations:
    cloud.google.com/neg: '{"exposed_ports": {"{{ .Values.proxy.port }}":{"name": "{{ .Release.Name }}-neg"}}}'
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.proxy.label }}-svc
  labels:
    app: {{ .Chart.Name }}
    component: {{ .Values.proxy.label }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Chart.Name }}
    component: {{ .Values.proxy.label }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.proxy.label }}
  ports:
    - protocol: TCP
      port: {{ .Values.proxy.port }}
      targetPort: {{ .Values.proxy.port }}
      name: {{ .Chart.Name }}-{{ .Values.proxy.label }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}-{{ .Values.proxy.label }}
  labels: &ProxyDeploymentLabels
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: {{ .Chart.Name }}-{{ .Values.proxy.label }}
    app: {{ .Chart.Name }}
    component: {{ .Values.proxy.label }}
spec:
  replicas: {{ .Values.proxy.replicas }}
  selector:
    matchLabels: *ProxyDeploymentLabels
  template:
    metadata:
      labels: *ProxyDeploymentLabels
    spec:
      containers:
        - name: {{ .Chart.Name }}-{{ .Values.proxy.label }}
          image: "{{ .Values.proxy.image.repo }}:{{ .Values.proxy.image.tag }}"
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          ports:
            - containerPort: {{ .Values.proxy.port }}
      volumes:
        - name: nginx-config
          configMap:
            name: {{ .Release.Name }}-nginx-config