openapi: 3.0.1
info:
  title: Visulate for Oracle
  version: 1.1.37
  description: |-
    Visulate for Oracle is a tool to catalog a company's Oracle databases. It
    provides read-only access to the data dictionary for one or more registered
    databases.

    It allows DDL (data definition language) statements to be downloaded for database
    objects and CSV file generation to export table contents.

    It can catalog Oracle database instances in preparation for a compliance audit.
    Identify Enterprise Edition feature and option usage. Find Enterprise Edition
    license instances that could be be downgraded to Standard Edition 2.

    The APIs + an associated UI provide an Oracle data dictionary browsing service to help
    data engineers understand the structure and dependencies in Oracle databases
    that they plan to migrate to the Cloud.
  contact:
    name: Peter Goldthorp
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: '/'
paths:
  /endpoints/:
    summary: Database endpoints
    get:
      summary: List database endpoints
      parameters:
        - in: query
          name: status
          description: toggle result to retrieve valid/invalid endpoints
          required: false
          schema:
            type: string
            example: invalid
      description: >-
        Gets valid or invalid database endpoints as an object of name:value pairs.
        Response name is the endpoint name. The response value
        is the connect string for valid connections. Invalid connections are returned as
        and object with the connect string as the first item and error as the second.
      responses:
        200:
          description: Endpoint list
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoint:
                    type: string
                    example: oracle18XE
                  connectString:
                    type: string
                    example: db.visulate.net:1521/XEPDB1
                  status:
                    type: object
                    properties:
                      connectString:
                        type: string
                        example: db.visulate.net:1521/XEPDB1
                      error:
                        type: string
                        example: Get connection timed out after 5000 ms
  /api/:
    summary: Database
    get:
      summary: Database summary
      parameters:
        - in: query
          name: filter
          description: object_name filter
          required: false
          schema:
            type: string
            example: dba_*
      description: >-
        List each registered database along with a count of object types by
        schema
      operationId: ''
      responses:
        200:
          description: List of registered databases
          content:
            application/json:
              schema:
                type: object
                properties:
                  endpoints:
                    type: array
                    items:
                      type: object
                      properties:
                        endpoint:
                          type: string
                          example: oracle18XE
                        description:
                          type: string
                          example: An Oracle XE database
                        connectString:
                          type: string
                          example: db.visulate.net:1521/XEPDB1
                        schemas:
                          type: object
                          properties:
                            owner:
                              type: array
                              items:
                                type: object
                                properties:
                                  OWNER:
                                    type: string
                                    example: HR
                                  OBJECT_TYPE:
                                    type: string
                                    example: PROCEDURE
                                  OBJECT_COUNT:
                                    type: integer
                                    example: 2
        404:
          description: No objects match the database, owner + object_type combination
        503:
          description: Database connection failure
  /find/{name}:
    get:
      summary: Find objects in multiple databases
      parameters:
        - in: path
          name: name
          description: database object name
          required: true
          schema:
            type: string
            example: dbms_output
      responses:
        200:
          description: Returns a list of objects found in each database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FindResult"
  /api/{db}:
    get:
      summary: List database characteristics
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      responses:
        200:
          description: Returns an array of query results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        404:
          description: Invalid database
  /api/{db}/{owner}:
    get:
      summary: Schema object summary
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: query
          name: filter
          description: object_name filter
          required: false
          schema:
            type: string
            example: rnt_*
      responses:
        200:
          description: Returns an array of query results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        404:
          description: No objects match the database, owner combination
  /api/{db}/{owner}/{type}:
    get:
      summary: List database objects
      description: >-
        Retreive a list of database objects for the given db, owner and object_type combination
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: PACKAGE
        - in: query
          name: filter
          description: object_name filter
          required: false
          schema:
            type: string
            example: rnt_*
        - in: query
          name: template
          description: The name of a handlebars or mustache template to transform the result
          required: false
          schema:
            type: string
            example: none

      responses:
        200:
          description: Returns an array of object names
          content:
            application/json:
              schema:
                example: ["RNT_MENUS_PKG", "RNT_MENU_LINKS_PKG"]
                type: array
                items:
                  type: string
        404:
          description: No objects match the database, owner + object_type combination
        503:
          description: Database connection failure

  /api/{db}/{owner}/{type}/{name}/{status}:
    get:
      summary: Filtered list of database objects
      description: >-
        Retreive a list of database objects using the following query:
          ```
          select  object_id, object_name, object_type, owner
          from dba_objects
          where  owner = like :owner
          and object_type like :object_type
          and object_name like :object_name ESCAPE \_
          and status like :status
          order by object_name
          ```
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: PACKAGE
        - in: path
          name: name
          description: database object name or wildcard
          required: true
          schema:
            type: string
            example: RNT*
        - in: path
          name: status
          description: database object name or wildcard
          required: true
          schema:
            type: string
            example: VALID
        - in: query
          name: template
          description: The name of a handlebars or mustache template to transform the result
          required: false
          schema:
            type: string
            example: none
      responses:
        200:
          description: >-
            Returns an array of object names if the owner and type parameters do not
            include wildcard (*) characters. An object is returned for wildcard requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WildCardQueryResult"
        404:
          description: No objects match the database, owner + object_type combination
        503:
          description: Database connection failure
  /api/{db}/{owner}/{type}/{name}:
    get:
      summary: Database object report
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: PACKAGE BODY
        - in: path
          name: name
          description: database object name
          required: true
          schema:
            type: string
            example: RNT_MENUS_PKG
        - in: query
          name: template
          description: The name of a handlebars or mustache template to transform the result
          required: false
          schema:
            type: string
            example: none
      responses:
        200:
          description: Returns an array of query results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResult"
        404:
          description: No objects match the database, owner + object_type combination
        503:
          description: Database connection failure
    post:
      summary: Transform object details using a template
      description: Transform the object details using a handlebars template
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: RNTMGR2
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: TABLE
        - in: path
          name: name
          description: database object name
          required: true
          schema:
            type: string
            example: RNT_ACCOUNTS_RECEIVABLE
        - in: query
          name: template
          description: The name of a handlebars or mustache template to transform the result.
          required: true
          schema:
            type: string
            example: extract_links.hbs
      requestBody:
        description: The full JSON object details for the specified database object, as returned by the GET method of this endpoint.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryResult'
      responses:
        '200':
          description: A payload containing the base object and a list of related object identifiers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpLinkExtractionPayload'
        '400':
          description: Bad request, likely a missing or invalid template parameter.
  /ddl/{db}/{owner}/{type}:
    get:
      summary: Generate DDL
      description: Generate DDL for the specified owner and object type
      parameters :
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: PACKAGE BODY
      responses:
        200:
          description: DDL output produced by DBMS_METADATA
          content:
            text/plain:
              schema:
                type: string
                example: |
                  CREATE TABLE "WIKI"."RNT_LOOKUP_TYPES" ...
        403:
          description: DDL generation not supported for Oracle internal objects
        404:
          description: Requested database was not found
  /ddl/{db}/{owner}/{type}/{name}/{status}:
    get:
      summary: Generate DDL
      description: Generate DDL for the specified owner, object type, name and status
      parameters :
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
        - in: path
          name: owner
          description: database schema
          required: true
          schema:
            type: string
            example: WIKI
        - in: path
          name: type
          description: database object type
          required: true
          schema:
            type: string
            example: PACKAGE BODY
        - in: path
          name: name
          description: database object name or wildcard
          required: true
          schema:
            type: string
            example: RNT*
        - in: path
          name: status
          description: database object name or wildcard
          required: true
          schema:
            type: string
            example: VALID
      responses:
        200:
          description: DDL output produced by DBMS_METADATA
          content:
            text/plain:
              schema:
                type: string
                example: |
                  CREATE TABLE "WIKI"."RNT_LOOKUP_TYPES" ...
        403:
          description: DDL generation not supported for Oracle internal objects
        404:
          description: Requested database was not found

  /api/collection:
    post:
      summary: Retrieve details of related objects
      description: This endpoint retrieves details of related objects based on the provided input. Calls the database object report endpoint for each related object and returns the results.
      operationId: getRelatedObjectDetails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpLinkExtractionPayload'
      responses:
        '200':
          description: An array containing the full QueryResult details for the base object and all related objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/QueryResult"
        '400':
          description: Bad request
  /api/collection/{db}:
    post:
      summary: Database object collection
      description: Identify a collection of database objects matching one or more object paterns
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required: [owner, type, name, status]
                properties:
                  owner:
                    type: string
                    example: WIKI
                  type:
                    type: string
                    example: '*'
                  name:
                    type: string
                    example: RNT_MENUS*
                  status:
                    type: string
                    example: '*'

      responses:
        200:
          description: List of marching objects and their "uses" dependencies
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    OBJECT_ID:
                      type: integer
                      example: 22733
                    OBJECT_NAME:
                      type: string
                      example: DBMS_STANDARD
                    OBJECT_TYPE:
                      type: string
                      example: PACKAGE
                    OWNER:
                      type: string
                      example: SYS
                    REQUIRED_BY:
                      type: array
                      items:
                        type: object
                        properties:
                          OBJECT_ID:
                            type: integer
                            example: 22783
                          OBJECT_NAME:
                            type: string
                            example: RNT_MENUES_PKG
                          OBJECT_TYPE:
                            type: string
                            example: PACKAGE
                          OWNER:
                            type: string
                            example: WIKI
        404:
          description: Requested database was not found
  /sql/{db}:
    get:
      summary: List connect string for a database
      description: |
        Returns the connect string for a database if it is registered with the query-engine
        or null if the database is not registered. Used by the UI to determine whether to show
        a query region. The region is shown if a connect string is returned and it matches
        the connect string returned by the API server for the same database endpoint
      parameters :
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      responses:
        200:
          description: Connect string
          content:
            text/plain:
              schema:
                type: string
                example: |
                  db1151.visulate.net:1521/orcl
    post:
      security:
        - dbCustomAuth: []
      summary: Generate CSV or JSON from SQL
      description: |
        Executes a SQL statement in the specified database and returns the result as CSV
        or JSON. Database credentials are passed as a basic auth header. Application
        establishes a connection, runs the SQL passed as a body parameter, formats and streams
        the result then closes the database connection.
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      requestBody:
        required: true
        description: |
          The sql property contains the SQL statement to run including bind variables if required.
          Bind variable values are passed via the bind property. They can be passed as an
          array e.g. [280, "Accounts"] or object { "dept_id": 280, "dept_name": "Accounts"}. The
          options property controls post query formatting for the results.

          Passing a "download_lobs" value of "Y" will cause the api to return the contents of any BLOB or
          CLOB columns in the query if they are less than 1 GB. BLOB columns are base64 encoded.
          The API returns the size of the LOB if passed a "download_lobs" value of "N". An http 400
          response is returned for LOBs > 1 GB if "download_lobs"="Y"

          Passing a "csv_header" value of "Y" adds an initial header line to CSV results with the column
          names from the query. The property is ignored for JSON requests.

          The "cx_oracle_object" value is used to indicate an object type for queries that include an
          Oracle object type column. For example a query which selects a spatial column might return a
          value <cx_Oracle.Object MDSYS.SDO_GEOMETRY at 0x7f3efc9052d0> if the "cx_oracle_object" value
          is null. Passing a value of "MDSYS.SDO_GEOMETRY" causes the API to display the spatial column's
          properties
        content:
          application/json:
            schema:
              type: object
              required: [sql]
              properties:
                sql:
                  type: string
                  example: "select name, state, population from RNT_CITIES where rownum < :maxrows"
                binds:
                  type: object
                  example: {"maxrows": 5 }
                options:
                  type: object
                  example: {"download_lobs": "N", "csv_header": "y", "cx_oracle_object": null}
      responses:
        200:
          description: Query results
          content:
            text/csv:
              example: |
                "NAME","STATE","POPULATION"
                "HILLIARD","FL",3086
                "MAYO","FL",1237
                "ASTOR","FL",1556
                "LAKELAND","FL",97422
            application/json:
              example: |
                {"columns":["NAME", "STATE", "POPULATION"],
                "rows": [
                {"NAME": "HILLIARD", "STATE": "FL", "POPULATION": 3086},
                {"NAME": "MAYO", "STATE": "FL", "POPULATION": 1237},
                {"NAME": "ASTOR", "STATE": "FL", "POPULATION": 1556},
                {"NAME": "LAKELAND", "STATE": "FL", "POPULATION": 97422}
                ],
                "executionTime":	0.47812914848327637}

  /ai:
    get:
      summary: Check if AI is enabled
      description: |
        Returns a JSON object indicating whether the AI feature is enabled.
      responses:
        200:
          description: AI feature status
          content:
            application/json:
              schema:
                type: object
                properties:
                  enabled:
                    type: boolean
                    example: true

    post:
      summary: (MCP) Generate text using Google AI
      description: >-
        (Model-Context Protocol Step 3) The reasoning and execution phase for the AI agent.
        The agent sends a natural language message (the user's query or an internal verification question)
        along with the full context it gathered from the `/mcp/context` endpoint. The server forwards
        this to the Google AI model for processing and returns the generated text.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "What is the structure of the users table?"
                context:
                  $ref: '#/components/schemas/McpContextPayload'
      responses:
        200:
          description: Generated text
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    example: "The users table contains details of users including username and email."
        503:
          description: Service unavailable
          content:
            text/plain:
              schema:
                type: string
                example: "Google AI key is not set"

  /mcp/context/{db}:
    post:
      summary: (MCP) Get full context for a starting object
      description: >-
        (Model-Context Protocol Step 2) A consolidated endpoint for an AI agent to perform the entire
        context-gathering phase in a single call. The agent provides the
        coordinates of a starting object, and the server performs the multi-step process of
        fetching details, extracting links, and gathering the full collection context internally.
        This is the primary endpoint for an agent to use after discovering an object.
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [owner, name, type]
              properties:
                owner:
                  type: string
                  example: RNTMGR2
                name:
                  type: string
                  example: RNT_ACCOUNTS_RECEIVABLE
                type:
                  type: string
                  example: TABLE
      responses:
        '200':
          description: The complete context payload, ready to be sent to the /ai endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpContextPayload'
        '404':
          description: The specified starting object was not found.

  /mcp/search-objects/{db}:
    post:
      summary: (MCP) Search for database objects
      description: >-
        (Model-Context Protocol Step 1) This endpoint is the discovery mechanism for an AI agent.
        It takes a set of natural language search terms and finds relevant database objects
        (tables, views, etc.) by searching their names and comments. It returns a ranked
        list of candidates that the agent can use as a starting point for more detailed
        context gathering.
      parameters:
        - in: path
          name: db
          description: database endpoint
          required: true
          schema:
            type: string
            example: oracle18XE
      requestBody:
        required: true
        description: The search terms and object types to query for.
        content:
          application/json:
            schema:
              type: object
              required: [search_terms, object_types]
              properties:
                search_terms:
                  type: array
                  items:
                    type: string
                  example: ["amount", "due", "rental", "agreement"]
                object_types:
                  type: array
                  items:
                    type: string
                  example: ["TABLE", "VIEW"]
      responses:
        '200':
          description: A ranked list of matching database objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    owner:
                      type: string
                      example: RNTMGR2
                    name:
                      type: string
                      example: RNT_ACCOUNTS_RECEIVABLE
                    type:
                      type: string
                      example: TABLE
                    relevance_score:
                      type: number
                      example: 95.5
        '400':
          description: Bad request, likely missing search_terms.
components:
  securitySchemes:
    dbCustomAuth:
      type: apiKey
      in: header
      name: X-DB-Credentials
      description: Encoded database credentials. The value must be a base64-encoded string of 'username/password@db'.
  schemas:
    McpContextPayload:
      type: object
      description: The complete context payload sent to the AI for reasoning.
      properties:
        objectDetails:
          $ref: '#/components/schemas/QueryResult'
        relatedObjects:
          type: object
          description: A map of related objects, where the key is the object identifier and the value is its details.
          additionalProperties:
            $ref: '#/components/schemas/QueryResult'
        chatHistory:
          type: array
          items:
            type: object
            properties:
              user:
                type: string
              text:
                type: string
    McpLinkExtractionPayload:
      type: object
      description: Payload containing the base object and its extracted list of related objects. Used as the request for the collection details step.
      properties:
        object:
          type: string
          example: "RNTMGR2/TABLE/RNT_ACCOUNTS_RECEIVABLE"
        baseUrl:
          type: string
          example: "https://yourhost.com/api/vis24/"
        baseDB:
          type: string
          example: "vis24"
        baseOwner:
          type: string
          example: "RNTMGR2"
        baseType:
          type: string
          example: "TABLE"
        baseObject:
          type: string
          example: "RNT_ACCOUNTS_RECEIVABLE"
        relatedObjects:
          type: array
          items:
            type: string
          example:
            - "RNTMGR2/TABLE/RNT_ACCOUNTS_RECEIVABLE"
            - "RNTMGR2/TABLE/RNT_AGREEMENT_ACTIONS"
    WildCardQueryResult:
      type: object
      properties:
        owner:
          type: string
        objectTypes:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: FUNCTION
              count:
                type: integer
                example: 53
              objects:
                example: ["AR_AGING_BUCKETS=", "AR_APP_RULES="]
                type: array
                items:
                  type: string
    FindResult:
      type: object
      properties:
        find:
          type: string
          example: "dbms_output"
        result:
          type: array
          items:
            type: object
            properties:
              object_id:
                type: integer
                example: 20105
              owner:
                type: string
                example: PUBLIC
              object_name:
                type: string
                example: DBMS_OUTPUT
              object_type:
                type: string
                example: SYNONYM
              status:
                type: string
                example: VALID
    QueryResult:
      type: array
      items:
        type: object
        properties:
          title:
            type: string
            example: Object Details
          description:
            type: string
            example: "Database object details"
          display:
            type: array
            items:
              type: string
              example: Object Name
          link:
            type: string
            example: Table
          rows:
            type: array
            items:
              type: object
              properties:
                name-value:
                  type: string
                name-value2:
                  type: string
